JumpDialog is a member of TuringMain

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~ "Jump to Step..." Actions ~~~

            ActionListener
jumpItem --------------------> JumpItemListener ---> Set jumpDialog Visiable

            WindowAdapter
jumpDialog ------------------> JumpWindowListener ---> windowClosed Action

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~ "Speed Control" Actions ~~~
JSlider: http://docs.oracle.com/javase/7/docs/api/javax/swing/JSlider.html
MIN_SPEED = 0, MAX_SPEED = 100, INIT_SPEED = 50

               ChangeListener
speedSlider -------------------> SpeedSliderListener ---> stateChanged ---> update stepTimer

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~ stepTimer ~~~
Declaration:    70
Definition:     241
stepTimer controls the speed of steps.
Timer(int delay, ActionListener listener):
+ delay: the time interval of firing an action, in milliseconds
+ listener:
public void setInitialDelay(int initialDelay)
+ Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started
   before firing the first event. Upon construction, this is set to be the same as
   the between-event delay, but then its value is independent and remains unaffected by changes to
   the between-event delay.
public void setDelay(int delay)
+ Sets the Timer's between-event delay, the number of milliseconds between successive action events.
  This does not affect the initial delay property, which can be set by the setInitialDelay method.

               ActionListener
stepTimer ---------------------> StepTimerListener ---> actionPerformed ---> doStep(1)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~ runButton ~~~~
Declaration:    57
Definition:     208

               ActionListener
runButton ---------------------> RunButtonListener ---> actionPerformed --->
+ resetButton.doClick();    /* If current machine is already halted, then reset it first */
+ if frozen then setRunning() else setPaused()
~~~~ backButton ~~~~
Declaration:    58
Definition:     212

              ActionListener
backButton ---------------------> BackButtonListener ---> actionPerformed --->
+ machine.stepBack();
+ repaintTapeArea();
~~~~ stepButton ~~~~
Declaration:    58
Definition:     212

              ActionListener
stepButton ---------------------> StepButtonListener ---> actionPerformed --->
+ if Machine.NOT_HALTED then setPaused();
+ if !animationTimer.isRunning() then doStep(1);
~~~~ resetButton ~~~~
Declaration:    60
Definition:     212

                ActionListener
resetButton ---------------------> ResetButtonListener ---> actionPerformed ---> reset all related.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~ frozen ~~~~
frozen is an indicator of whether current machine is paused or not.
Declaration:	87
Calls: 
+ setPaused() ---> pause machine, sets the frozen indicator to true
+ setHalted() ---> halt machine, sets the frozen indicator to true
+ setReady() ---> machine is ready, sets the frozen indicator to true
+ setRunning() ---> machine is false, sets the frozen indicator to false
+ actionPerformed() ---> responses to the click of run button. If current machine is frozen, 
					     then run (setRunning()) it; else pause (setPaused()) it.
+ stateChanged() ---> responses to the change of speedSlider. If current machine is not frozen,
					  then begins the stepTimer with new speed.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Main GUI: 900*700

captionArea: 900*80
TapeArea: 900*120

informationArea: 900*50

controlArea: 450*300
450



+ run/back/forward/reset four buttons
+ speed label and speed slider
+ input informationÂ—
programArea: 450*300






